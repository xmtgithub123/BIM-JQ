<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>布置支吊架</title>
	<link rel="stylesheet" href="../public/stylesheets/bootstrap.min.css">
	<link rel="stylesheet" href="../public/stylesheets/flex.css">
	<link rel="stylesheet" href="../public/stylesheets/font-awesome.css">
	<link rel="stylesheet" href="../public/stylesheets/jquery.treegrid.css">
	<link rel="stylesheet" href="../public/stylesheets/style.css">
	<script src="../public/javascripts/jquery-1.11.1.min.js"></script> <!--引入vue.js-->
</head>
<body>
	<div class="body-wrap">
	    <div class="panel-body box-wrap">
      		<div class="bg-box-0">
				<div class="bg-box-b">
					<div class="form-horizontal">
					  <div class="form-group">
					    <label class="col-sm-2 control-label">支吊架：</label>
					    <div class="col-sm-10 pl-0">
					      <select name="" id="" class="form-control input-sm dl" v-cloak style="width:80px;margin-right:15px;" v-model="type">
								<option>支架</option>
					 			<option>吊架</option>
							</select>
							<!--label>组名：</label>
							<input type="text" class="form-control input-sm dl" style="width:80px;margin-right:15px;" v-model="input_groupName"-->
							<label>预埋件：</label>
							<select name="" id="" class="form-control input-sm dl" v-cloak style="width:100px;" v-model="embeddedPartFamily">
								<option  v-for="(index ,option) in embeddedPartOptions"> {{option.value}} </option>

								<!--<template  v-for="(index ,option) in embeddedPartOptions"  >
									<option value="{{option.value}}" v-if="index == 0" selected>{{option.value}}</option>
									<option v-else >{{option.value}}</option>
								</template>-->
							</select>
							<select name="" id="" class="form-control input-sm dl" v-cloak style="width:100px;" v-model="embeddedPartSymbol">
								<option  v-for="(index ,option) in embeddedPartGetSymbolOptions"> {{option.symbolName}} </option>

								<!--<template  v-for="(index ,option) in embeddedPartGetSymbolOptions"  >
									<option value="{{option.symbolName}}" v-if="index == 0" selected>{{option.symbolName}}</option>
									<option v-else >{{option.symbolName}}</option>
								</template>-->
							</select>
							<button class="btn btn-primary btn-sm" @click="showEditSymbol(1)" >新增类型</button>
					    </div>
					  </div>
					</div>

      				<div class="group-item mt-15">
      					<div class="panel panel-info penel-fix">
							<div class="panel-heading">立柱</div>
							<div class="panel-body-wrap ptb-5">
								<div class="form-horizontal">
								  <div class="form-group">
								    <label class="col-sm-2 control-label">高度：</label>
								    <div class="col-sm-10 pl-0">
								      <input type="text" class="form-control input-sm dl" style="width:100px" v-model="standColumnHeight"> mm
								      <label>类型：</label>
											<select name="" id=""  class="form-control input-sm dl" v-cloak style="width:100px" v-model="standColumnFamily">
											<option v-for="option in standColumnOptions">
												{{option.value}}
											</option>
									        </select>
									        <select name="" id=""  class="form-control input-sm dl" v-cloak style="width:100px" v-model="standColumnSymbol">
												<option v-for="option in standColumnGetSymbolOptions">
													{{option.symbolName}}
												</option>
									        </select>
											<button class="btn btn-primary btn-sm" @click="showEditSymbol(2)">新增类型</button>
								    </div>
								  </div>
								</div>
							</div>
						</div>
      				</div>
      				<div class="group-item mt-15">
      					<div class="panel panel-info penel-fix">
							<div class="panel-heading">横担</div>
							<div class="panel-body-wrap ptb-5" style="overflow:hidden;">
								<div class="row">
									<div class="col-sm-7">
										<div class="form-horizontal">
										  	<div class="form-group">
											    <label class="col-sm-3 control-label pr-0">长度：</label>
											    <div class="col-sm-9">
											      <input type="text" class="form-control input-sm dl" style="width:100px" v-model="horPartLen"> mm
											    </div>
										  	</div>
										  	<div class="form-group">
											    <label class="col-sm-3 control-label pr-0">距底偏移：</label>
											    <div class="col-sm-9">
											      	<input type="text" class="form-control input-sm dl" style="width:100px;" v-model="horPartZOffset"> mm
											    </div>
										  	</div>
										  	<div class="form-group">
											    <label class="col-sm-3 control-label pr-0">横担间隔：</label>
											    <div class="col-sm-9">
											      	<input type="text" class="form-control input-sm dl" style="width:100px" v-model="horPartDist"> mm
											      	<label class="ml-15">数量：</label><input type="text" class="form-control input-sm dl "style="width:80px;" v-model="horPartCount">
											    </div>
										  	</div>
										  	<div class="form-group">
											    <label class="col-sm-3 control-label pr-0">位置：</label>
											    <div class="col-sm-9">
											      	<select name="" id=""  class="form-control input-sm dl" v-cloak style="width:100px;margin-right:15px;" v-model="horPartPlaceType">
														<option>居中</option>
												  		<option>居左</option>
														<option>居右</option>
												      </select>&nbsp;&nbsp;&nbsp;&nbsp;
												      <label class="ml-15">偏移：</label><input type="text" class="form-control input-sm dl" style="width:80px;" v-model="horPartOffset"> mm
											    </div>
										  	</div>
										  	<div class="form-group">
											    <label class="col-sm-3 control-label pr-0">类型：</label>
											    <div class="col-sm-9">
											      	<select name="" id=""  class="form-control input-sm dl" v-cloak style="width:100px;margin-right:15px;" v-model="crossArmFamily">
															<option v-for="option in crossArmOptions">
																{{option.value}}
															</option>
												        </select>
												       <select name="" id=""  class="form-control input-sm dl" v-cloak style="width:100px; margin-right:15px;" v-model="crossArmSymbol">
															<option v-for="option in crossArmGetSymbolOptions">
																{{option.symbolName}}
															</option>
												        </select>
												        <button class="btn btn-primary btn-sm" @click="showEditSymbol(3)">新增类型</button>
											    </div>
										  	</div>
										</div>
									</div>
									<div class="col-sm-5">
										<div class="img-box-flex">
					  	    				<img src="{{type}}.png" alt="" class="img-responsive">
					  	    			</div>
									</div>
								</div>

							</div>
						</div>
      				</div>
      				<div class="group-item mt-15">
      					<div class="panel panel-info penel-fix">
							<div class="panel-heading">支吊架排布</div>
							<div class="panel-body-wrap p-5">
								<div class="row">
									<div class="col-sm-6 col-md-6">
										<table class="table table-bordered table-flex text-center">
											<thead>
											  	<tr>
												 	<td>间隔</td>
												    <td>个数</td>
												    <td>角度</td>
												    <td>操作</td>
											  </tr>
											</thead>
									  	    <tbody>
												<tr v-for="list in trList" v-cloak>
													<td>
														<input type="text" class="input-noborder text-center" style="width:80px;" v-model="list.Dist">
													</td>
													<td>
														<input type="text" class="input-noborder text-center" style="width:80px;" v-model="list.Count">

													</td>
													<td>
														<input type="text" class="input-noborder text-center" style="width:80px;" v-model="list.Angle" >

													</td>
													<td>
														<button class="btn btn-primary btn-xs" @click="removeTrlist(this)"><i class="glyphicon glyphicon-trash"></i></button>
													</td>
												</tr>
												<tr>
													<td >
														<input type="text" class="input-noborder text-center" style="width:80px;" v-model="input_interval" @change="changeTR">
													</td>
													<td>
														<input type="text" class="input-noborder text-center"  style="width:80px;" v-model="input_number">
													</td>
													<td>
														<input type="text" class="input-noborder text-center"  style="width:80px;" v-model="input_angle">
													</td>
													<td>

													</td>
												</tr>
									  		</tbody>
										</table>
									</div>
									<div class="col-sm-6 col-md-6">
										<div class="img-box-flex">
							  	    		<img src="支吊架排布.png" alt="" class="img-responsive">
							  	    	</div>
									</div>
								</div>
							</div>
						</div>
      				</div>

      				<div class="bg-footer ">
						<button class="btn btn-primary btn-bim btn-sm mb-0 pull-right" @click="place">布置</button>
					</div>
				</div>
      		</div>
	    </div>
	</div>
	<!-- Modal -->
	<div class="modal fade" id="NewAddTypeModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
	  <div class="modal-dialog" role="document">
	    <div class="modal-content">
	      <div class="modal-header">
	        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
	        <h4 class="modal-title" id="myModalLabel">新增类型</h4>
	      </div>
	      <div class="modal-body">
	      	<div class="row">
	      		<div class="col-xs-12 col-sm-12">
	      			<div class="item_select_2" id="select_zu">
							<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族</span>
							<select name="" id=""  v-model="selected" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
								<option v-for="(index , option) in options">{{option.value}}</option>
							</select>
						</div>
	      		</div>
	      	</div>
	      	<div class="row">
	      		<div class="col-xs-6">
	      			<div class="item_select_2" id="select_type_zu">
							<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族类型</span>
							<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
								<option v-for="(index , item) in items" @click="clickItems(item)"> {{item.symbolName}}</option>
							</select>
						</div>
	      		</div>
	      		<div class="col-xs-6">
	      			<div class="add_new_type_box">
							<p>新增族类型</p>
							<div class="form-group">
								<span>名字&nbsp;&nbsp;</span>
								<input type="text" v-model="input_add_name" class="form-control input-sm">
							</div>
							<div class="col-sm-2 p-0">属性</div>
							<div class="col-sm-10">
								<div class="table-height" style="max-height:156px; margin-bottom:20px;">
									<table class="table-bordered text-center">
										<tr v-for="(key,value) in parameterDict">
											<td style="width:80px;">{{key}}</td>

											<td>
												<input class="input-noborder" style="height:25px;text-align: center;width:80px;" v-model="value" />
											</td>
										</tr>

									</table>
								</div>
							</div>
							<div class="clearfix">
								<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="submitData(this,'增加')" v-cloak>增加</button>
								<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" v-show="selected_type.length > 0" @click="submitData(this,'修改')" v-cloak>修改</button>
							</div>
						</div>
	      		</div>
	      	</div>
	        	<!-- <div flex="box:mean">
					<div class="flex">
						<div class="item_select_2" id="select_zu">
							<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族</span>
							<select name="" id=""  v-model="selected" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
								<option v-for="(index , option) in options">{{option.value}}</option>
							</select>
						</div>
<<<<<<< HEAD
						<div class="item_select_2" id="select_type_zu">
							<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族类型</span>
							<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
								<option v-for="(index , item) in items" @click="clickItems(item)"> {{item.symbolName}}</option>
							</select>
=======
						<div class="clearfix">
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="addSymbol()" v-cloak>增加</button>
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="modifySymbol()" v-cloak>修改</button>
>>>>>>> a538b82331de3a54820f749de9e233665130e7c0
						</div>
					</div>
					<div class="flex">
						<div class="add_new_type_box">
							<p>新增族类型</p>
							<div class="form-group">
								<span>名字&nbsp;&nbsp;</span>
								<input type="text" v-model="input_add_name" class="form-control input-sm">
							</div>
							<div class="col-sm-2 p-0">属性</div>
							<div class="col-sm-10">
								<div class="table-height" style="max-height:156px; margin-bottom:20px;">
									<table class="table-bordered text-center">
										<tr v-for="(key,value) in parameterDict">
											<td style="width:80px;">{{key}}</td>

											<td>
												<input class="input-noborder" style="height:25px;text-align: center;width:80px;" v-model="value" />
											</td>
										</tr>

									</table>
								</div>
							</div>
							<div class="clearfix">
								<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="submitData(this,'增加')" v-cloak>增加</button>
								<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" v-show="selected_type.length > 0" @click="submitData(this,'修改')" v-cloak>修改</button>
							</div>
						</div>

					</div>
				</div> -->
	        </div>
	      <div class="modal-footer">
	      </div>
	    </div>
	  </div>
	</div>

	<div class="body-full-mask" v-if="isShowMask" v-cloak>
		<div class="app-loading">
	  		<div class="box">
	  			<div class="line-spin-fade-loader">
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  			</div>
	  			<p>{{showMaskInfo}}</p>

	  		</div>
  		</div>
	</div>

	<script src="../public/javascripts/bootstrap.min.js"></script> <!--引入vue.js-->
	<script src="../public/javascripts/vue.js"></script> <!--引入vue.js-->
	<script src="../public/javascripts/vue-resource.min.js"></script><!--引入vue.js 插件库 vue中的ajax-->
	<script type="text/javascript">
	</script>

	<script type="text/javascript">
		vue = new Vue({
			el:'body',
			data:{
				isToNext:true,
				trList:[
					// {
					// 	interval:'',
					// 	number:'',
					// 	angle:''
					// }
				],  //支架排布信息数组
				input_interval:'', //支吊架排布间隔
				input_number:'', //支吊架排布个数
				input_angle:'', //支吊架排布角度
				type:'支架',//支吊架
				input_groupName:'',
				embeddedPartFamily:'',//预埋件族
				embeddedPartSymbol:'', //预埋件族类型
				embeddedPartOptions:[],	//预埋件所有族
				standColumnHeight:'1000',//立柱高度
				standColumnFamily:'',//立柱族
				standColumnSymbol:'',//立柱类型
				standColumnOptions:[],	//立柱所有族
				horPartZOffset:'300',//横担立柱底偏移
				horPartLen:'500',//横担长度
				horPartDist:'300',//横担间隔
				horPartPlaceType:'居中', //横但位置
                horPartOffset:'0',//横担位置偏移
				horPartCount: '2', //横担数量
				crossArmFamily:'角钢',//横担族
				crossArmSymbol:'',//横担类型
				crossArmOptions:[],	//横担所有族
				objs:[],
				options:[],
				lists:[],
				selected:'',//设置族
				selected_type:'',//设置族类型
				input_add_name:'',//新增类型 名字
				status:false,
				modelDialogType:1,
				embeddedPartPath:'电气一次\\电缆支吊架\\预埋件\\',
				standColumnPath:'电气一次\\电缆支吊架\\立柱\\',
				crossArmPath:'电气一次\\电缆支吊架\\横担\\',
				isShowMask:true,//是否显示全屏遮罩
				showMaskInfo:'正在获取族类型信息',
				parameterTemplate:{r1:'',r:'',k:'',"长度(默认)":'',bf:'',d:'',t:'',x:'',y:'',tw:'',tf:'',b:''},
				parameterDict:{},
			},
			created(){

				var that = this;
				if (window.JQ) {
					var sendJson = {
						EventName:'JQFamily',
						Path:that.embeddedPartPath,
						Operation:'getFamilyFileInfos',
						Parameters:that.parameterTemplate,
						Callback:'vue.loadEmbeddedPart'
					}
					this.showMaskInfo ='正在获取族类型信息';
					this.isShowMask = true;
					JQ.raiseEvent(JSON.stringify(sendJson));
				}



				// if (window.JQ) {
				// 	var path = '电气一次\\预埋件\\'
				// } else {
				// 	var that = this;
				// 	that.$http.get('/javascripts/type.json').then(function(res){
				// 		console.log(res)
				// 		var data = res.data;
				// 		for (var i =0 ;i < data.length; i++) {
				// 			var symbolData = data[i].Symbol;
				// 			var list= [];
				// 			for (var j = 0 ;j <symbolData.length; j++) {
				// 				list.push(data[i].Symbol[j])
				// 			}
				// 			that.options.push({value:data[i].Name,items:list})
				// 		}
				// 	})
				// 	.catch(function(error) {
				// 		console.log(error)
				// 	})
				// 	console.log(that.options)
				// }

			},

			methods:{
				//加载预埋件族
				loadEmbeddedPart(info) {
					this.embeddedPartOptions.length = 0
					var that = this;
					var infos = info;
					infos.forEach(function(e) {
						that.embeddedPartOptions.push({value:e.name, items:e.symbols});
					})
					if (this.embeddedPartFamily.length == 0 && this.embeddedPartOptions.length > 0) {
						//todo:读取配置
						this.embeddedPartFamily = this.embeddedPartOptions[0].value;
					}
					if (this.embeddedPartSymbol.length == 0 && this.embeddedPartGetSymbolOptions.length > 0) {
						//todo:读取配置
						this.embeddedPartSymbol = this.embeddedPartGetSymbolOptions[0].symbolName;
					}
					//var parameterJson = {};
					if (window.JQ) {
						var sendJson = {
							EventName:'JQFamily',
							Path:that.standColumnPath,
							Operation:'getFamilyFileInfos',
							Parameters:that.parameterTemplate,
							Callback:'vue.loadStandColumn'
						}
						JQ.raiseEvent(JSON.stringify(sendJson));
					}
				},

				//加载立柱族
				loadStandColumn(info) {
					this.standColumnOptions.length = 0
					var that = this;
					var infos = info;
					infos.forEach(function(e) {
						that.standColumnOptions.push({value:e.name,items:e.symbols});
					})

					if (this.standColumnFamily.length == 0 && this.standColumnOptions.length > 0) {
						this.standColumnFamily = this.standColumnOptions[0].value;
					}
					if (this.standColumnSymbol.length == 0 && this.standColumnGetSymbolOptions.length > 0) {
						this.standColumnSymbol = this.standColumnGetSymbolOptions[0].symbolName;
					}

					if (window.JQ) {
						var sendJson = {
							EventName:'JQFamily',
							Path:that.crossArmPath,
							Operation:'getFamilyFileInfos',
							Parameters:that.parameterTemplate,
							Callback:'vue.loadCrossArm'
						}
						JQ.raiseEvent(JSON.stringify(sendJson));
					}
				},

				//加载横臂族
				loadCrossArm(info) {
					this.crossArmOptions.length = 0
					var that = this;
					var infos = info;
					infos.forEach(function(e) {
						that.crossArmOptions.push({value:e.name,items:e.symbols});
					})

					if (this.crossArmFamily.length == 0 && this.crossArmOptions.length > 0) {
						this.crossArmFamily = this.crossArmOptions[0].value;
					}
					if (this.crossArmSymbol.length == 0 && this.crossArmGetSymbolOptions.length > 0) {
						this.crossArmSymbol = this.crossArmGetSymbolOptions[0].symbolName;
					}

					this.isShowMask = false;
				},

				clickItems(obj) {
					this.status = true;
					console.log(obj)
					var that = this;
					that.input_add_name = obj.symbolName;
					that.parameterDict = obj.parameters;
					/*switch (this.modelDialogType)
					{
						case 1:
							break;
						case 2:
							break;
						case 3:
							break;
						default:
							return;
					}*/

				},

				//获取族路径
				getPath() {
					switch (this.modelDialogType) {
						case 1:
							return this.embeddedPartPath;

						case 2:
							return this.standColumnPath

						case 3:
							return this.crossArmPath

						default:
							return ''
					}
				},

				//修改族类型
				modifySymbol() {
					var that = this
					var sendJson = {
						EventName:'JQFamily',
						Path: that.getPath(),
						Operation:'modifyFamilySymbol',
						FamilyName:that.selected,
						SymbolName:that.selected_type[0],
						SymbolNewName:that.input_add_name,
						Parameters:that.parameterDict,
						Callback:'vue.reloadData'
					}
					that.showMaskInfo ='正在更新族类型';
					that.isShowMask = true;
					JQ.raiseEvent(JSON.stringify(sendJson));
					that.status = false;
				},

				//添加族类型
				addSymbol() {
					var that = this;
					var sendJson = {
						EventName:'JQFamily',
						Path: that.getPath(),
						Operation:'addFamilySymbol',
						FamilyName:that.selected,
						SymbolName:that.input_add_name,
						Parameters:that.parameterDict,
						Callback:'vue.reloadData'
					}
					that.showMaskInfo ='正在更新族类型';
					that.isShowMask = true;
					JQ.raiseEvent(JSON.stringify(sendJson));
				},

				/*submitData(obj, status) {
					var that = this;
					var path = '';
					var parameter = {};
					switch (this.modelDialogType)
					{
						case 1:
							path = this.embeddedPartPath;
							parameter = {};
							break;
						case 2:
							path = this.standColumnPath;
							parameter = {};
							break;
						case 3:
							path = this.crossArmPath;
							parameter = {};
							break;
						default:
							return;
					}

					if (status == '修改') {
						if (window.JQ)
						{
							var sendJson = {
								EventName:'JQFamily',
								Path:path,
								Operation:'modifyFamilySymbol',
								FamilyName:that.selected,
								SymbolName:that.selected_type[0],
								SymbolNewName:that.input_add_name,
								Parameters:that.parameterDict,
								Callback:'vue.reloadData'
							}
							that.showMaskInfo ='正在更新族类型';
							that.isShowMask = true;
							JQ.raiseEvent(JSON.stringify(sendJson));

						}

						that.status = false;

					}
					else if (status == '增加'){
						if (window.JQ)
						{
							var sendJson = {
								EventName:'JQFamily',
								Path:path,
								Operation:'addFamilySymbol',
								FamilyName:that.selected,
								SymbolName:that.input_add_name,
								Parameters:that.parameterDict,
								Callback:'vue.reloadData'
								}
							that.showMaskInfo ='正在更新族类型';
							that.isShowMask = true;
							JQ.raiseEvent(JSON.stringify(sendJson));

						}
					}
				},*/

				reloadData() {
					var that = this;
					if (window.JQ) {
						var sendJson = {
							EventName:'JQFamily',
							Path:that.embeddedPartPath,
							Operation:'getFamilyFileInfos',
							Parameters:that.parameterTemplate,
							Callback:'vue.loadEmbeddedPart'
						}
						JQ.raiseEvent(JSON.stringify(sendJson));
					}
				},

				changeTR(){
					var that = this;
					if ( (/^[0-9]+.?[0-9]*$/.test(that.input_interval) == false)) {
						//alert('请输入数字')
						this.input_number = '1'
						this.input_angle = '0'
					} else {
						that.trList.push({Dist:that.input_interval, Count:1, Angle:0})
						that.input_interval = ''
						that.input_number = '',
						that.input_angle = ''
					}
					console.log(this.trList)
				},

				removeTrlist(e) {
					console.log(e)
					var index = e.$index;
					this.trList.splice(index, 1)
				},

				//布置
				place() {
					var that = this;
					var info = {
						EventName: 'PlaceSupport',
						Type: that.type,
						GroupName:that.input_groupName,
						BasePart: that.embeddedPartFamily,
						BasePartSymbol: that.embeddedPartSymbol,
						//立柱部分
						VerPart: that.standColumnFamily,
						VerPartSymbol:that.standColumnSymbol,
						VerPartHeight:that.standColumnHeight,
						//横担部分
						HorPart: that.crossArmFamily,
						HorPartSymbol: that.crossArmSymbol,
						HorPartLen: that.horPartLen,
						HorPartDist: that.horPartDist,
						HorPartCount: that.horPartCount,
						HorPlaceType: that.horPartPlaceType,
						HorOffset: that.horPartOffset,
						HorBaseOffset: that.horPartZOffset,
						//支架排布
						Arrangement: that.trList
					}
					console.log(info)
					JQ.raiseEvent(JSON.stringify(info))
				},

				showEditSymbol(type) {
					$("#NewAddTypeModel").modal("show");
					this.modelDialogType = type;
					//this.selected = "";
					this.parameterDict = {};
					this.input_add_name = "";
					switch (type)
					{
						case 1:  //预埋件
							this.options = this.embeddedPartOptions;
							this.selected = this.embeddedPartFamily;
							break;
						case 2:  //立柱
							this.options = this.standColumnOptions;
							this.selected = this.standColumnFamily;
							break;
						case 3:  //横臂
							this.options = this.crossArmOptions;
							this.selected = this.crossArmFamily
							break;
						default:
							this.options = [];
							break;
					}
				}
			},

			computed:{
				items() {
					var items = [] ,selectedValue = this.selected;
					this.options.forEach(function(e){
						if(e.value == selectedValue) {
							items = e.items;
						}
					});
					return items;
				},

				embeddedPartGetSymbolOptions() {
					var items = [] ,selectedValue = this.embeddedPartFamily;
					this.embeddedPartOptions.forEach(function(e) {
						if(e.value == selectedValue) {
							items = e.items;
						}
					});
					return items;
				},

				standColumnGetSymbolOptions() {
					var items = [] ,selectedValue = this.standColumnFamily;
					this.standColumnOptions.forEach(function(e) {
						if(e.value == selectedValue) {
							items = e.items;
						}
					});
					return items;
				},

				crossArmGetSymbolOptions() {
					var items = [] ,selectedValue = this.crossArmFamily;
					this.crossArmOptions.forEach(function(e) {
						if(e.value == selectedValue) {
							items = e.items;
						}
					});
					return items;
				}
			},

			watch:{
				trList:{
					handler(val,oldVal) {
						// console.log(val)
						this.trList = val
					}
				},

				embeddedPartFamily: {
					handler(val , oldVal) {
						if (this.embeddedPartGetSymbolOptions.length > 0)
						{
							this.embeddedPartSymbol = this.embeddedPartGetSymbolOptions[0].symbolName;
						}
					}
				},

				standColumnFamily: {
					handler(val , oldVal) {
						if (this.standColumnGetSymbolOptions.length > 0)
						{
							this.standColumnSymbol = this.standColumnGetSymbolOptions[0].symbolName;
						}
					}
				},

				crossArmFamily:
				{
					handler(val, oldVal)
					{
						if (this.crossArmGetSymbolOptions.length > 0)
						{
							this.crossArmSymbol = this.crossArmGetSymbolOptions[0].symbolName;
						}
					}
				},

				selected:
				{
					handler(val, oldVal) {
						if (this.items.length > 0)
						{
							this.selected_type = [this.items[0].symbolName];
							this.clickItems(this.items[0]);
						}
						else
							this.selected_type = [];
					}
				},

				options: {
					handler(val,oldVal) {
						if (this.selected.length > 0 && this.items.length > 0)
						{
							this.selected_type = [this.items[0].symbolName];
							this.clickItems(this.items[0]);
						}
						else
							this.selected_type = [];
					}
				}
			}
		})
	</script>
</body>
</html>