<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>布置窗</title>
	<link rel="stylesheet" href="../public/stylesheets/bootstrap.min.css">
	<link rel="stylesheet" href="../public/stylesheets/flex.css">
	<link rel="stylesheet" href="../public/stylesheets/style.css">
	<style type="text/css">
		.ml-15 {
			margin-left:15px;
		}
		.mt-15 {
			margin-top:15px;
		}
		.isDisabled {
			pointer-events: none
		}
	</style>
</head>
<body>
	<div class="body-wrap">
		<div class="panel-wrap">
		<div class="panel-body box-wrap" id="win_hook">
			<div flex="box:mean">
				<div class="flex">
					<div class="item_select_2" id="select_zu">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族</span>
						<select name="" id=""  v-model="selected" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
							<option v-for="option in options">
								{{option.value}}
							</option>
							
						</select>
					</div>
					<div class="item_select_2" id="select_type_zu">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族类型</span>
						<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
							<option v-for="(index , item) in items" :id='item.Id' @click="clickItems(item)">
								{{item.类型名称}}
							</option>
						</select>
						<!-- <p>选择：{{selected_type}}</p> -->
					</div>
					
					<div class="item_select_2">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;底标高</span>
						<input type="text" class="form-control input-sm" v-model='input_dbg'>
					</div>
					
					
				</div>
				<div class="flex">
					<button class="btn btn-primary btn-sm btn-bim btn-xs">加载族</button>
					<div class="add_new_type_box">
						<p>新增族类型</p>
						<div class="form-group">
							<span>名字&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_name" class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>宽度&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_width"  class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>高度&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_height"  class="form-control input-sm">
						</div>
						<div class="clearfix">
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="submitData(this,status)" v-cloak>{{ status ? '修改' : '增加'}}</button>
						</div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<div class="item_select_2 col-md-6">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;布置类型：</span>
						<select name="" id="" v-model="selected_bz_type" class="form-control input-sm" @change="chooseSelectOption">
							<option v-for="option in type_options" :value="option.value">{{option.value}}</option>
						</select>

					</div>
					<div class="col-md-12">
						<table class="table-bordered text-center ml-15 mt-15">

						  <tr >
						    <td style="width:100px;">间隔(mm)</td>
						    
						    <td v-for="item in tableIntervals">
						    	<input class="input-noborder" v-model="item.interval" style="height:25px;text-align: center;width:50px;" ></input>
						    </td>
						    <td @change="td_changeIntervals">
						    	<input class="input-noborder" v-model="table_interval" style="height:25px;text-align: center;width:50px;" :class="{disabled:isDisabled}"></input>
						    </td>

						  </tr>
						  <tr>
						    <td style="width:100px;">个数</td>
						    <td v-for="item in tableNumbers">
						    	<input class="input-noborder" v-model="item.number" style="height:25px;text-align: center;width:50px;"></input>
						    </td>
						    <td @change="td_changeNumber">
						    	<input class="input-noborder" v-model="table_Number" style="height:25px;text-align: center;width:50px;" :class="{disabled:isDisabled}"></input>
						    </td>
						  </tr>

						</table>
					</div>
				</div>
			</div>
			<div class="row box_footer">
				<div class="col-md-12">
					<button class="btn btn-primary btn-xs btn-bim pull-right" @click="submit" >确定</button>
				</div>
			</div>
		</div>
	</div>
	</div>
	

	<script src="../public/javascripts/vue.js"></script>
	<script src="../public/javascripts/vue-resource.min.js"></script>
	<script>
		vue = new Vue ({
			el:'#win_hook',
			data:{
				objs:[],
				options:[],
				lists:[],
				selected:'',//设置族
				selected_type:'',//设置族类型
				selected_symbol: {},  //选中的族类型对象

				selected_bz_type:'中心',//设置布置类型
				type_options:[  //布置类型选项
					{value:'中心'},
					{value:'头部'}
				],

				input_dbg:'0', //设置低标高

				input_add_name:'',//新增类型 名字
				input_add_width:'',//新增类型 长度
				input_add_height:'',//新增类型 宽度
				isDanger:false,
				status:false,
				isTableShow:true, // 点击头部的时候判断是否显示表格
				table_interval:'',//表格-相邻间隔
				table_Number:'',//表格-个数
				tableIntervals:[],//间隔数组
				tableNumbers:[],//个数数组
				isDisabled:true,

			},

			created(){
				var that = this;
				if (window.JQ) {
					JQ.getFamilys("窗").then(this.loadRes)
					.catch(function(error) {
						console.log(error)
					})
				} else {
					that.$http.get('../public/javascripts/type.json').then(this.loadRes)
					.catch(function(error) {
						console.log(error)
					})
				}
			},

			methods:{
				loadRes(res){
					var that = this;
					var data = JSON.parse(res);//res.data;
					for (var i = 0; i < data.length; i++) {
						var symbolData = data[i].Symbol;
						var list= [];
						for (var j = 0 ;j <symbolData.length; j++) {
							list.push(data[i].Symbol[j])
							// console.log(list[j])
						}
						that.options.push({value:data[i].Name,items:list})
					}

					if (that.options.length > 0) {
						that.selected = that.options[0].value
					}
				}, 

				clickItems(obj) {
					this.status = true;
					console.log(obj)	
					var that = this;
					that.selected_symbol = obj;
					that.input_add_name = obj.类型名称;
					that.input_add_width = obj.宽度;
					that.input_add_height = obj.高度;					
				},

				//布置类型selected 监听中心与头部方法
				chooseSelectOption() {
					console.log(this.selected_bz_type)
					if(this.selected_bz_type == '头部') {
						this.isDisabled = false
					}
					else {
						this.isDisabled = true
					}

				},
				//监听改变 布置类型 - 头部 -表格中的相邻间隔
				td_changeIntervals() {
					if( /^[0-9]+.?[0-9]*$/.test(this.table_interval) == false ){
						alert('请输入数字')
						this.table_interval = '';
					}
					else {
						this.inputHasDataFun();
					   }
					
				},
				//监听改变 布置类型 - 头部 -表格中的个数
				td_changeNumber(){
					if( /^[0-9]+.?[0-9]*$/.test(this.table_Number) == false ){
						alert('请输入数字')
						this.table_Number = '';
					}
					else {
						this.inputHasDataFun();
					}
					
				},
				//输入相邻间隔与个数后，默认后面自动增加一列
				inputHasDataFun(){
					for(var i =0;i<=this.table_interval.length;i++) {
						for(var j =i;j<=this.table_Number.length;j++) {
							if((this.table_interval[i] && this.table_Number[j]) != undefined) {
								this.tableIntervals.push({interval:this.table_interval})
								this.table_interval = '';
								this.tableNumbers.push({number:this.table_Number})
								this.table_Number = '';
							}
							else {
								console.log('请输入完整')
							}
						}
						
					}
				},
				submitData(obj,status) {
					var that = this;
					console.log(obj)
					if(status) {
						console.log("=====获取修改数据api======")
						that.input_add_name = '';
						that.input_add_width = '';
						that.input_add_height ='';
						alert('修改成功')
					}
					else{
						console.log('======调用增加族类型api======')
						that.$data.options.push({value:that.input_add_name,items:[that.input_add_width + 'x'+ that.input_add_height]})
						that.input_add_name = '';
						that.input_add_width = '';
						that.input_add_height ='';
						alert('增加成功')
					}
				},
				submit(){
					var that = this;
					var info = {};
					info.EventName="PlaceDoorWindow";

					info.Dist = "";
					info.FamilyName = that.selected_symbol.族名称
					info.SymbolName = that.input_add_name;
					info.SymbolId = that.selected_symbol.Id

					info.PlaceType = that.selected_bz_type;

					if (that.tableNumbers.length == that.tableIntervals.length)
					{
						for (var i = 0; i < that.tableNumbers.length ; i++)
						{
							console.log("test");
							console.log(that.tableIntervals[i].interval);
							console.log(parseInt(that.tableIntervals[i].interval));
							if (parseInt(that.tableIntervals[i].interval) == NaN || parseInt(that.tableNumbers[i].number) == NaN)
								continue;
							if (parseInt(that.tableIntervals[i].interval) > 0 && parseInt(that.tableNumbers[i].number) > 0)
							{
								
								info.Dist += that.tableIntervals[i].interval + "*" + that.tableNumbers[i].number;
								if (i != that.tableNumbers.length - 1)
									info.Dist += ";"
							}
						}
					}
					console.log(info);
					if (window.JQ) {
						JQ.raiseEvent(JSON.stringify(info));
					}
				}
			},
			computed:{   //vue 的计算属性
				items() {
					var items = [] ,selectedValue = this.$data.selected; //将选中 族 赋值
					this.$data.options.forEach(function(e){  //族 选择框 中的 数值 遍历
						if(e.value == selectedValue) {  //如果 选中选择框中的某值 == 前选中的 族的 值
							items = e.items; //将选中的 items 赋值给新的items
						}
					});
					return items;	//返回 items
				}
			}	
		})
		
	</script>
</body>
</html>