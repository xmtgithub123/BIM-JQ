<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>布置结构柱</title>
	<link rel="stylesheet" href="../public/stylesheets/bootstrap.min.css">
	<link rel="stylesheet" href="../public/stylesheets/flex.css">
	<link rel="stylesheet" href="../public/stylesheets/style.css">
</head>
<body>
	<div class="body-wrap">
		<div class="panel-wrap ">
		<div class="panel-body box-wrap" id="win_hook">
			<div  flex="box:mean">
				<div class="flex">
					<div class="item_select_2" id="select_zu">
						<span>结构柱族&nbsp;</span>
						<select name="" id=""  v-model="selected_family" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
							<option v-for="option in options">
								{{option.value}}
							</option>
							
						</select>
					</div>
					<div class="item_select_2" id="select_type_zu">
						<span>&nbsp;&nbsp;&nbsp;族类型&nbsp;</span>
						<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
							<option v-for="(index , item) in items" :id='item.Id' @click="clickItems(item)">
								{{item.symbolName}}
							</option>
						</select>
						<!-- <p>选择：{{selected_type}}</p> -->
					</div>
					<div class="item_select_2">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;插入点</span>
						<select name="" id="" v-model="selected_bz_type" class="form-control input-sm">
							<option v-for="option in type_options" v-bind:value="option.value">{{option.value}}</option>
						</select>
					</div>
					
				</div>
				<div class="flex">
					<div class="add_new_type_box">
						<p>新增族类型</p>
						<div class="form-group">
							<span>名字&nbsp;&nbsp;</span>
							<input type="text" v-model="inputSymbolName" class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>b&nbsp;&nbsp;</span>
							<input type="text" v-model="inputB"  class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>h&nbsp;&nbsp;</span>
							<input type="text" v-model="inputH"  class="form-control input-sm">
						</div>
						<div class="clearfix">
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="submitData(this,'增加')" v-cloak>增加</button>
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" v-show="selected_type.length > 0" @click="submitData(this,'修改')" v-cloak>修改</button>
						</div>
					</div>
					<div style="margin-top:10px;">
						偏移 x : <input type="text" style="width:50px;" placeholder="0.0" v-model="offset_x">
							 y : <input type="text" style="width:50px;" placeholder="0.0" v-model="offset_y">
					</div>
				</div>
			</div>
			<div class="row box_footer">
				<div class="col-md-12">
					<button class="btn btn-primary btn-xs btn-bim pull-right" @click="place" >确定</button>
				</div>
			</div>
		</div>
	</div>
	</div>
	
	<div class="body-full-mask" v-if="isShowMask" v-cloak>	
		<div class="app-loading">
	  		<div class="box">
	  			<div class="line-spin-fade-loader">
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  			</div>
	  			<p>{{showMaskInfo}}</p>

	  		</div>
  		</div>
	</div>
	<script src="../public/javascripts/vue.js"></script>
	<script src="../public/javascripts/vue-resource.min.js"></script>
	<script>
		var vue = new Vue ({
			el:'body',
			data:{
				objs:[],
				options:[],
				lists:[],
				//selectedFamilyId:0,
				selected_family:'',//设置族
				selected_type:'',//设置族类型
				selected_symbol: {},  //选中的族类型对象
				selected_bz_type: '框选轴网',//设置布置类型
				type_options: [  //布置类型选项
					{value:'框选轴网'},
					{value:'多选轴网'}
				],
				input_dbg:'', //设置低标高

				inputSymbolName:'', //族类型
				inputB:'', //柱子的b
				inputH:'', //柱子的h
				offset_x:'0',//偏移 x
				offset_y:'0',//偏移 y
				isDanger:false,
				status:false,
				path:'土建\\结构柱\\',
				isShowMask:true,//是否显示全屏遮罩
				showMaskInfo:'正在获取族类型信息'
			},

			created() {
				var that = this;
				if (window.JQ)
				{
					var sendJson = {
						EventName:'JQFamily',
						Path:this.path,
						Operation:'getFamilyFileInfos',
						Parameters:{b:'',h:''},
						Callback:'vue.loadRes'
						}
					this.showMaskInfo = '正在获取族类型信息';
					this.isShowMask = true;
					JQ.raiseEvent(JSON.stringify(sendJson));
				}
				else {
					this.$http.get('../public/javascripts/type.json').then(this.loadRes)
					.catch(function(error) {
						console.log(error.body)
						//that.loadRes(error.bodyText);
					})
				}
			},

			methods: {
				//加载族，族类型信息
				loadRes(res) {
					var that = this;

					var that = this;
					isReload = that.options.length > 0;
					that.options = [];
					res.forEach(function(e) {
						that.options.push({value:e.name,items:e.symbols});
					})
					
					if (!isReload && that.options.length > 0) {
						that.selected_family = that.options[0].value
					}
					this.isShowMask = false;
				},

				//添加族类型
				submitData(obj,status) {
					var that = this;
					console.log(obj)
					if(status == '修改') {				
						if (window.JQ)
						{
							var sendJson = {
								EventName:'JQFamily',
								Path:that.path,
								Operation:'modifyFamilySymbol',
								FamilyName:that.selected_family,
								SymbolName:that.selected_type[0],
								SymbolNewName:that.inputSymbolName,
								Parameters:{b:that.inputB,h:that.inputH},
								Callback:'vue.reloadData'
								}
							this.showMaskInfo = '正在更新族类型';
							that.isShowMask = true;
							JQ.raiseEvent(JSON.stringify(sendJson));
						}
							
						that.status = false;

					}
					else if (status == '增加'){						
						if (window.JQ)
						{
							var sendJson = {
								EventName:'JQFamily',
								Path:that.path,
								Operation:'addFamilySymbol',
								FamilyName:that.selected_family,
								SymbolName:that.inputSymbolName,
								Parameters:{b:that.inputB,h:that.inputH},
								Callback:'vue.reloadData'
								}
							this.showMaskInfo = '正在更新族类型';
							that.isShowMask = true;
							JQ.raiseEvent(JSON.stringify(sendJson));
						}
					}
				},

				reloadData()
				{
					var sendJson = {
						EventName:'JQFamily',
						Path:this.path,
						Operation:'getFamilyFileInfos',
						Parameters:{b:'',h:''},
						Callback:'vue.loadRes'
						}
					JQ.raiseEvent(JSON.stringify(sendJson));
					this.isShowMask = false;
				},

				//选中族类型
				clickItems(obj) {
					this.status = true;
					// console.log(obj)	
					var that = this;
					that.selected_symbol = obj;
					that.inputSymbolName = obj.symbolName;
					that.inputB = obj.parameters.b;
					that.inputH = obj.parameters.h;
				},

				//布置构件
				place() {
					var that = this;

					var info = {
						EventName: "PlaceColumn",
						OffsetX: that.offset_x,
						OffsetY: that.offset_y,
						FamilyName: that.selected_family,
						SymbolName: that.selected_symbol.symbolName,
						PlaceType: that.selected_bz_type,
						Path:that.path
					};
					
					console.log(info);
					if (window.JQ) {
						//JQ.clickOK(JSON.stringify(info));
						JQ.raiseEvent(JSON.stringify(info));
					}
				}
			},

			computed:{
				//获取族类型
				items() {
					var data = this.$data;
					var selectedFamilyName = data.selected_family;
					for (var i = 0; i < data.options.length; i++) {
						//console.log(data.options[i])
						if (data.options[i].value == selectedFamilyName) {
							return data.options[i].items
						}
					}

					return []
				}
			}	
		})
		
	</script>
</body>
</html>