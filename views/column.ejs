<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>布置结构柱</title>
	<link rel="stylesheet" href="../public/stylesheets/bootstrap.min.css">
	<link rel="stylesheet" href="../public/stylesheets/flex.css">
	<link rel="stylesheet" href="../public/stylesheets/style.css">
</head>
<body>
	<div class="body-wrap">
		<div class="panel-wrap ">
		<div class="panel-body box-wrap" id="win_hook">
			<div  flex="box:mean">
				<div class="flex">
					<div class="item_select_2" id="select_zu">
						<span>结构柱族&nbsp;</span>
						<select name="" id=""  v-model="selectedFamilyName" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
							<option v-for="option in options">
								{{option.value}}
							</option>
							
						</select>
					</div>
					<div class="item_select_2" id="select_type_zu">
						<span>&nbsp;&nbsp;&nbsp;族类型&nbsp;</span>
						<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
							<option v-for="(index , item) in items" :id='item.Id' @click="clickItems(item)">
								{{item.类型名称}}
							</option>
						</select>
						<!-- <p>选择：{{selected_type}}</p> -->
					</div>
					<div class="item_select_2">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;插入点</span>
						<select name="" id="" v-model="selected_bz_type" class="form-control input-sm">
							<option v-for="option in type_options" v-bind:value="option.value">{{option.value}}</option>
						</select>
					</div>
					
				</div>
				<div class="flex">
					<button class="btn btn-primary btn-sm btn-bim btn-xs">加载族</button>
					<div class="add_new_type_box">
						<p>新增族类型</p>
						<div class="form-group">
							<span>名字&nbsp;&nbsp;</span>
							<input type="text" v-model="inputSymbolName" class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>b&nbsp;&nbsp;</span>
							<input type="text" v-model="inputB"  class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>h&nbsp;&nbsp;</span>
							<input type="text" v-model="inputH"  class="form-control input-sm">
						</div>
						<div class="clearfix">
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="modifySymbol" v-cloak>修改</button>
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="addSymbol" v-cloak>增加</button>
						</div>
					</div>
					<div style="margin-top:10px;">
						偏移 x : <input type="text" style="width:50px;" placeholder="0.0" v-model="offset_x">
							 y : <input type="text" style="width:50px;" placeholder="0.0" v-model="offset_y">
					</div>
				</div>
			</div>
			<div class="row box_footer">
				<div class="col-md-12">
					<button class="btn btn-primary btn-xs btn-bim pull-right" @click="place" >确定</button>
				</div>
			</div>
		</div>
	</div>
	</div>
	

	<script src="../public/javascripts/vue.js"></script>
	<script src="../public/javascripts/vue-resource.min.js"></script>
	<script>
		var vue = new Vue ({
			el:'#win_hook',
			data:{
				objs:[],
				options:[],
				lists:[],
				//selectedFamilyId:0,
				selectedFamilyName:'',//设置族
				selected_type:'',//设置族类型
				selected_symbol: {},  //选中的族类型对象
				selected_bz_type: '框选轴网',//设置布置类型
				type_options: [  //布置类型选项
					{value:'框选轴网'},
					{value:'多选轴网'}
				],
				input_dbg:'', //设置低标高

				inputSymbolName:'', //族类型
				inputB:'', //柱子的b
				inputH:'', //柱子的h
				offset_x:'0',//偏移 x
				offset_y:'0',//偏移 y
				isDanger:false,
				status:false
			},

			created() {
				var that = this;
				if (window.JQ) {
					JQ.getFamilys("结构柱").then(this.loadRes)
					.catch(function(error) {
						console.log(error)
					})
				} else {
					this.$http.get('../public/javascripts/type.json').then(this.loadRes)
					.catch(function(error) {
						console.log(error.body)
						//that.loadRes(error.bodyText);
					})
				}
			},

			methods: {
				//加载族，族类型信息
				loadRes(res) {
					var that = this;

					var data = JSON.parse(res);

					for (var i = 0; i < data.length; i++) {
						var symbolData = data[i].Symbol;
						var list = [];
						for (var j = 0 ;j < symbolData.length; j++) {
							var symbol = symbolData[j];
							symbol.FamilyId = data[i].Id;
							list.push(symbol)
							// console.log(list[j])
						}
						that.options.push({id:data[i].Id, value:data[i].Name, items:list})
					}

					if (that.options.length > 0) {
						that.selectedFamilyName = that.options[0].value
					}
				},

				//添加族类型回调，用于刷新界面
				addSymbolCallback(symbolJSON) {
					//console.log('addSymbol:')
					//console.log(symbolJSON)
					var symbol = JSON.parse(symbolJSON)
					var that = this;
					for (var i = 0; i < that.options.length; i++) {
						console.log(that.options[i].id + '==' + symbol.FamilyId)
						if (that.options[i].id == symbol.FamilyId) {
							that.options[i].items.push(symbol)
							that.selected_type = symbol.类型名称
							that.selected_symbol = symbol;
							that.inputSymbolName = symbol.类型名称;
							that.inputB = symbol.b;
							that.inputH = symbol.h;
							break;
						}
					}
				},

				//添加族类型
				addSymbol() {
					var that = this;
					if (window.JQ) {
						var info = {
							EventName: "JQFamily",
							Operation: "add",
							Name: that.inputSymbolName,
							b: that.inputB,
							h: that.inputH,
							SymbolId: that.selected_symbol.Id,
							Callback: "vue.addSymbolCallback"
						}
						console.log(info)
						JQ.raiseEvent(JSON.stringify(info));
					}
				},

				//修改族类型回调，用于刷新界面
				modifySymbolCallback(symbolJSON) {
					var symbol = JOSN.parse(symbolJSON)
					var that = this;
					for (var i = 0; i < that.options.length; i++) {
						var famiy = that.options[i];
						if (family.id == symbol.FamilyId) {
							for (var j = 0; j < family.items.length; j++)
								if (famiy.items[j].Id == symbol.Id) {
									family.items[j] = symbol;
									return
								}
						}
					}
				},

				//修改族类型
				modifySymbol() {
					var that = this;
					if (window.JQ) {
						var info = {
							EventName: "JQFamily",
							Name: that.inputSymbolName,
							b: that.inputB,
							h: that.inputH,
							SymbolId: that.selected_symbol.Id,
							Callback: "vue.modifySymbolCallback"
						}
						console.log(info)
						JQ.raiseEvent(JSON.stringify(info));
					}
				},

				//选中族类型
				clickItems(obj) {
					this.status = true;
					// console.log(obj)	
					var that = this;
					that.selected_symbol = obj;
					that.inputSymbolName = obj.类型名称;
					that.inputB = obj.b;
					that.inputH = obj.h;
				},

				//布置构件
				place() {
					var that = this;

					var info = {
						EventName: "PlaceColumn",
						OffsetX: that.offset_x,
						OffsetY: that.offset_y,
						FamilyName: that.selected_symbol.族名称,
						SymbolName: that.selected_symbol.类型名称,
						SymbolId: that.selected_symbol.Id,
						PlaceType: that.selected_bz_type
					};
					
					console.log(info);
					if (window.JQ) {
						//JQ.clickOK(JSON.stringify(info));
						JQ.raiseEvent(JSON.stringify(info));
					}
				}
			},

			computed:{
				//获取族类型
				items() {
					var data = this.$data;
					var selectedFamilyName = data.selectedFamilyName;
					for (var i = 0; i < data.options.length; i++) {
						//console.log(data.options[i])
						if (data.options[i].value == selectedFamilyName) {
							return data.options[i].items
						}
					}

					return []
				}
			}	
		})
		
	</script>
</body>
</html>