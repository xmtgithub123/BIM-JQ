<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>布置轴网</title>
	<link rel="stylesheet" href="../public/stylesheets/bootstrap.min.css">
	<link rel="stylesheet" href="../public/stylesheets/flex.css">
	<link rel="stylesheet" href="../public/stylesheets/style.css">
</head>
<body>
	<div class="body-wrap">
		<div class="panel-wrap">
	      <div class="panel-body box-wrap">
	         	<div flex="box:mean">
	         		<div class="flex">
						<div class="item_1 item_border">
							<canvas id='grid'  width='270' height='270' />
						</div>
						<div class="item_select_1">
							<span>插入基点&nbsp;</span>
							<select name="" id=""  class="form-control input-sm" v-model="selected_add_jd" v-cloak>
								<option value="" v-for="item in add_jd" >{{item.value}}</option>
							</select>
						</div>
						<div class="item_select_1">
							<span>旋转角度&nbsp;</span>
							<select name="" id="" class="form-control input-sm" v-model="selected_rotation_angle">
								<option value="" v-for="item in rotation_angle">{{item.value}}</option>
							</select>
						</div>
					</div>
					<div class="flex">
						<div class="item_2 item_border" id="horizontal_line_hook">

							<div class="flex_center">
								<h4>水平线</h4>
								<button class="btn btn-default btn-xs" @click="hor_addSubmit">新增间隔</button>
							</div>
							<div class="item_2_height" flex="box:mean">
								<div class="flex flex_around">
									<div class="table-height">
										<table class="table table-bordered">
											  <col class="col-xs-4">
											  <col class="col-xs-4">
											  <col class="col-xs-4">
											  <thead>
											  	<tr>
											 
											    <td>间隔</td>
											    <td>个数</td>
											  </tr>
											  </thead>
										  	<tbody>
											  	<tr v-for="list in hor_arrObj" v-cloak >
											  		
												    <td><input  style="width:50px;" v-model="list.Dist" ></td>
												    <td><input  style="width:50px;"v-model="list.count"></td>
												</tr>
										  </tbody>
										</table>
									</div>
									

									<div class="item_radio">
										<div class="radio">
										  <label>
										    <input type="radio" name="optionsRadios" id="optionsRadios1" value="up"  checked=""  checked>
										   上开
										  </label>
										  <label>
										    <input type="radio" name="optionsRadios" id="optionsRadios2" value="down" >
										   下开
										  </label>
										</div>
									</div>
								</div>
								<div class="flex">
									<div class="item_2_lists">
										<select multiple style="width: 100%" v-model="hor_selected"  class="form-control ">
										    <option v-for="option in hor_options" @click="hor_clickItems" v-cloak>
										    	{{option.value}}
										    </option>
										  
										  </select>
									</div>
								</div>
							</div>
							<div class="row">
								<div class="col-md-12">
									<div class="p-5">
										<p>输入</p>
										<textarea name="" id=""  rows="4" class="form-control"  @change="hor_changeArea" v-model="hor_textarea"></textarea>
									</div>
									
								</div>
							</div>
						</div>
					</div>
					<div class="flex">
						<div class="item_2 item_border" id="vertical_line_hook">
							<div class="flex_center">
								<h4>垂直线</h4>
								<button class="btn btn-default btn-xs" @click="ver_addSubmit">新增间隔</button>
							</div>
							<div class="item_2_height" flex="box:mean">
								<div class="flex flex_around">
									<div class="table-height">
										<table class="table table-bordered">
											  <col class="col-xs-4">
											  <col class="col-xs-4">
											  <col class="col-xs-4">
											  <thead>
											  	<tr>
											  
											    <td>间隔</td>
											    <td>个数</td>
											  </tr>
											  </thead>
										  	<tbody>
											  	<tr v-for="list in ver_arrObj" v-cloak >
											  		
												    <td><input style="width:50px;" v-model="list.Dist" ></td>
												    <td><input style="width:50px;" v-model="list.count"></td>
												</tr>
										  </tbody>
										</table>
									</div>

									<div class="item_radio">
										<div class="radio">
										  <label>
										    <input type="radio" name="options" id="options1" value="option1" checked >
										   左进
										  </label>
										  <label>
										    <input type="radio" name="options" id="options1" value="option1">
										   右进
										  </label>
										</div>
									</div>
								</div>
								<div class="flex">
									<div class="item_2_lists">
										<select multiple style="width: 100%" v-model="ver_selected" class="form-control ">
										    <option v-for="option in ver_options" @click="ver_clickItems" v-cloak >
										    	{{option.value}}
										    </option>
										  </select>
									</div>
								</div>
							</div>
							<div class="row">
								<div class="col-md-12">
									<div class="p-5">
										<p>输入</p>
										<textarea name="" id=""  rows="4"  class="form-control" @change="ver_changeArea" v-model="ver_textarea"></textarea>
									</div>
									
								</div>
							</div>
						</div>
					</div>
	         	</div>
	         	<div class="row box_footer">
					<div class="col-md-12">
						<button class="btn btn-default btn-xs btn-bim pull-right ml-30">取消</button>
						<a href="javascript:void(0);" class="btn btn-primary btn-xs btn-bim pull-right" @click="onClickOk">插入</a>
						
					</div>
				</div>
	      </div>
	    </div>
	</div>
				

	<script src="../public/javascripts/vue.js"></script> <!--引入vue.js-->
	<script src="../public/javascripts/vue-resource.min.js"></script><!--引入vue.js 插件库 vue中的ajax-->
	<script>

		new Vue({  //注册vue实例
			el:'body', //挂载点
			data:{
				hor_options:[     //水平间隔 - 选择框 - options
					{value:1000},
					{value:2000},
					{value:3000},
					{value:4000}
				],
				ver_options:[    //垂直间隔 - 选择框 - options
					{value:1000},
					{value:3000},
					{value:3000},
					{value:4000}
				],
				hor_selected:'',  //水平 - 选择框 - 选中值
				ver_selected:'',  //垂直 - 选择框 - 选中值
				selected_add_jd:'', //插入基点 - 选择框 - 选中值
				add_jd:[
					{value:'中心'},  //插入基点 - 选择框 - 值列表
					{value:'头部'}
				],
				selected_rotation_angle:'', //旋转角度 -选择框 -选中值
				rotation_angle:[   
					{value:'0'},	//旋转角度 - 选择框 - 值列表
					{value:'90'}
				],
				hor_arrObj:[],  //经过hor_addSubmit 点击事件后，将选中的选项push到该数组中 数组结构：hor_arrObj[Dist:xxx,count:xxx]
				ver_arrObj:[],  //经过ver_addSubmit 点击事件后，将选中的选项push到该数组中 数组结构：ver_arrObj[Dist:xxx,count:xxx]

				hor_textarea:'', //水平textarea框内容
				ver_textarea:'',//垂直textarea框内容
				hor_Numb:1,
				ver_Numb:1,

				gridInfos: {  //轴网对象，用于预览和发送给revit
					OffsetX : -3500.0,
					OffsetY : -3500.0,
					Hor:[],
					Ver:[],
					HorLength:0,
					VerLength:0
				}  
			},

			/*created() {
				var c = document.getElementById("grid");
				var cxt = c.getContext("2d");
				cxt.fillStyle = "#FF0000";
				cxt.fillRect(0, 0, c.width, c.height);
			},*/

			methods:{
				hor_clickItems(){

				},

				ver_clickItems(){

				},
				hor_addSubmit() { //选中某一间隔 - 点击新增选中间隔事件
					if(this.hor_selected != '' && this.hor_selected.length == 1){ //判断是否选则了一个

						this.hor_arrObj.push({Dist:this.hor_selected,count:1});  //将选中的push到指定数组
						// console.log((this.hor_arrObj).length)
						this.hor_Numb = (this.hor_arrObj).length+1;

						this.updateGridInfos()
					}
					else{
						alert("请选择一个间隔")
					}
				},
				ver_addSubmit() {
					if(this.ver_selected != '' && this.ver_selected.length == 1){
						this.ver_arrObj.push({Dist:this.ver_selected,count:1});

						this.updateGridInfos()
					}
					else{
						alert("请选择一个间隔")
					}
				},
				hor_changeArea(){  // 监听水平textarea的变化
					console.log('hor change')
					// console.log(this.hor_arrObj)
					if (this.hor_textarea == ''){
						this.hor_textarea = []
					}
					else {

						var that = this;  //防止this指向问题
						var obj = this.hor_textarea.split(' '); //将hor_textarea中的数值通过空格分隔
						// console.log(obj)
						that.hor_arrObj = []; // 初始化hor_arrObj数组
						obj.forEach(function(e,i){
							that.hor_arrObj.push({Dist:e.split('*')[0],count:e.split('*')[1]});   //得到以*分隔的数值

						})
						// console.log(that.hor_arrObj)
					}

					this.updateGridInfos()
				},
				ver_changeArea(){  // 监听垂直textarea的变化
					console.log('ver change')
					if(this.ver_textarea == ''){
						this.ver_textarea = []
					}
					else {
						var that = this;
						var obj = this.ver_textarea.split(' ');
						that.ver_arrObj = [];
						obj.forEach(function(e,i){
							that.ver_arrObj.push({Dist:e.split('*')[0],count:e.split('*')[1]});
						})
					}
					this.updateGridInfos()
				},

				//更新轴网对象
				updateGridInfos() {
					var that = this;
					that.gridInfos.Hor.length = 0;
					that.gridInfos.Ver.length = 0;
					that.gridInfos.Hor.push({Name:'A', Dist:0});
					that.gridInfos.Ver.push({Name:'1', Dist:0});
					that.gridInfos.HorLength = 0;
					that.gridInfos.VerLength = 0;

					var index = 0;
				    this.hor_arrObj.forEach(function(e, iter) {
				    	var dist = parseInt(e.Dist[0]);
				    	var count = e.count;
				    	for (var i = 0; i < count; i++) {
							index += 1;
				    		that.gridInfos.VerLength += dist;
				        	that.gridInfos.Hor.push({Name:String.fromCharCode(65+index), Dist:dist})
						}
						
				    })

					index = 1;
				    this.ver_arrObj.forEach(function(e, iter) {
				    	var dist = parseInt(e.Dist[0]);
				    	var count = e.count;
				    	for (var i = 0; i < count; i++) {
							index += 1;
				    		that.gridInfos.HorLength += dist;
				        	that.gridInfos.Ver.push({Name:index.toString(), Dist:dist})
						}
				    })

					that.drawGrid()
				},

				//轴网预览
				drawGrid() {
					var that = this;
					var canvas = document.getElementById("grid");
					var cxt = canvas.getContext("2d");
					cxt.clearRect(0, 0, canvas.width, canvas.height)
					cxt.strokeStyle = "#FF0000";

					var gridWidth = that.gridInfos.HorLength - that.gridInfos.OffsetX * 2;
					var gridHeight = that.gridInfos.VerLength - that.gridInfos.OffsetY * 2;
					var scale = Math.min(canvas.width / gridWidth, canvas.height / gridHeight);
					//console.log('grid width=' + gridWidth + ' height=' + gridHeight + ' scale=' + scale
					//            + ' canvas width=' + canvas.width + ' height=' + canvas.height)
					cxt.save()
					cxt.translate((canvas.width - gridWidth * scale) / 2, (canvas.height - gridHeight * scale) / 2)

					var dist = 0
					cxt.beginPath()
					that.gridInfos.Hor.forEach(function(line) {
						dist += line.Dist;
						var y = gridHeight - (dist - that.gridInfos.OffsetY)
						cxt.moveTo(0, y * scale)
						cxt.lineTo(gridWidth * scale, y * scale)
					})

					dist = 0
					that.gridInfos.Ver.forEach(function(line) {
						dist += line.Dist
						var x = (dist - that.gridInfos.OffsetX)
						cxt.moveTo(x * scale, 0)
						cxt.lineTo(x * scale, gridHeight * scale)
					})

					cxt.closePath()
					cxt.stroke();
					
					cxt.restore()
				},

				onClickOk() {
					/*var gridInfos = {
						OffsetX : -3500.0,
						OffsetY : -3500.0,
						Hor:[],
						Ver:[],
						HorLength:0,
						VerLength:0
					};
					gridInfos.Hor = [];
					gridInfos.Hor.push({Name:'A', Dist:0});
					gridInfos.Ver = [];
					gridInfos.Ver.push({Name:'1', Dist:0});

					var index = 0;
				    this.hor_arrObj.forEach(function(e, i) {
				    	var dist = parseInt(e.Dist[0]);
				    	var count = e.count;
				    	for (var i = 0; i< count; i++) {
							index += 1;
				    		gridInfos.VerLength += dist;
				        	gridInfos.Hor.push({Name:String.fromCharCode(65+index), Dist:dist})
						}
						
				    })

					index = 1;
				    this.ver_arrObj.forEach(function(e,i) {
				    	var dist = parseInt(e.Dist[0]);
				    	var count = e.count;
				    	for (var i = 0; i < count; i++) {
							index += 1;
				    		gridInfos.HorLength += dist;
				        	gridInfos.Ver.push({Name:index.toString(), Dist:dist})
						}
				    })
				    console.log(gridInfos)*/
					// console.log(JSON.stringify(this.ver_arrObj))
					//console.log(this.gridInfos);
					JQ.clickOK(JSON.stringify(this.gridInfos));
				}
			},
			watch:{			
				hor_arrObj:{  //增加监听事件
					handler:function(val,oldVal) {
						// console.log(val)
						this.hor_textarea = val;
						var that = this;
						var hor_obj = [];
						var hor_obj1= [];
						// console.log(val)
						var that = this;
						this.hor_textarea.forEach(function(e,i){
							if(e.temp !='' && e.count != '') {
								console.log(e.Dist+e.count)
								hor_obj.push(e.Dist+'*'+e.count)
								// hor_obj1.push(e.Dist+'*'+e.count)

							}
						})
						console.log(this.hor_arrObj)
						this.hor_textarea = hor_obj.join(' ');
					},
					deep:true
				},
				ver_arrObj:{
					handler:function(val,oldVal) {
						
						this.ver_textarea = val;
						var that = this;
						var ver_obj =[];
						this.ver_textarea.forEach(function(e,i){
							if(e.temp !='' && e.count != '') {
								ver_obj.push(e.Dist+'*'+e.count)
							}
						})
						this.ver_textarea = ver_obj.join(' ');
						
					},
					deep:true
				}
			}
		
		})

	</script>
</body>
</html>