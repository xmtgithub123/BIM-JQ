<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>布置门窗</title>
	<link rel="stylesheet" href=".../public/stylesheets/bootstrap.min.css">
	<link rel="stylesheet" href=".../public/stylesheets/flex.css">
	<link rel="stylesheet" href=".../public/stylesheets/style.css">
	<style type="text/css">
		.ml-15 {
			margin-left:15px;
		}
		.mt-15 {
			margin-top:15px;
		}
	</style>
</head>
<body>
	<div class="body-wrap">
		<div class="panel-wrap">
		<div class="panel-body box-wrap" id="win_hook">
			<div class="row">
				<div class="col-xs-12 col-sm-12">
					<div class="item_select_2" id="select_zu">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族</span>
						<select name="" id=""  v-model="selected" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
							<option v-for="option in options">
								{{option.value}}
							</option>

						</select>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-xs-6 col-sm-6">	
					<div class="item_select_2" id="select_type_zu">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族类型</span>
						<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
							<option v-for="(index , item) in items" :id='item.Id' @click="clickItems(item)">
								{{item.symbolName}}
							</option>
						</select>
					</div>
				</div>
				<div class="col-xs-6 col-sm-6">	
					<div class="add_new_type_box" >
						<p>新增族类型</p>
						<div class="form-group">
							<span>名字&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_name" class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>宽度&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_width"  class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>高度&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_height"  class="form-control input-sm">
						</div>
						<div class="clearfix">
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="submitData(this,'增加')" v-cloak>增加</button>
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" v-show="selected_type.length > 0" @click="submitData(this,'修改')" v-cloak>修改</button>
						</div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-sm-12 col-xs-12">	
					<div class="item_select_2">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;底标高</span>
						<input type="text" class="form-control input-sm" v-model='input_dbg'>
					</div>
				</div>
			</div>
			<!-- <div flex="box:mean">
				<div class="flex">
					<div class="item_select_2" id="select_zu">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族</span>
						<select name="" id=""  v-model="selected" class="form-control input-sm" :class="{danger:isDanger}" v-cloak>
							<option v-for="option in options">
								{{option.value}}
							</option>

						</select>
					</div>
					<div class="item_select_2" id="select_type_zu">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;族类型</span>
						<select name="" id="" multiple class="item_select_h form-control" v-model="selected_type" v-cloak>
							<option v-for="(index , item) in items" :id='item.Id' @click="clickItems(item)">
								{{item.symbolName}}
							</option>
						</select>
					</div>

					<div class="item_select_2">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;底标高</span>
						<input type="text" class="form-control input-sm" v-model='input_dbg'>
					</div>


				</div>
				<div class="flex">
					<div class="add_new_type_box" >
						<p>新增族类型</p>
						<div class="form-group">
							<span>名字&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_name" class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>宽度&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_width"  class="form-control input-sm">
						</div>
						<div class="form-group">
							<span>高度&nbsp;&nbsp;</span>
							<input type="text" v-model="input_add_height"  class="form-control input-sm">
						</div>
						<div class="clearfix">
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" @click="submitData(this,'增加')" v-cloak>增加</button>
							<button class="btn btn-primary btn-sm m-0 btn-bim btn-xs pull-right" v-show="selected_type.length > 0" @click="submitData(this,'修改')" v-cloak>修改</button>
						</div>
					</div>
				</div>
			</div> -->
			
			<div class="row">
				<div class="col-md-12">
					<div class="item_select_2">
						<span>&nbsp;&nbsp;&nbsp;&nbsp;布置类型</span>
						<select name="" id="" v-model="selected_bz_type" class="form-control input-sm" @change="chooseSelectOption">
							<option v-for="option in type_options" :value="option.value">{{option.value}}</option>
						</select>

					</div>
					<div class="col-md-12">
						<table class="table-bordered text-center ml-15 mt-15" :class="{disabled:!isTableShow}">

						  <tr >
						    <td style="width:100px;">间隔(mm)</td>

						    <td v-for="item in tableIntervals">
						    	<input class="input-noborder" v-model="item.interval" style="height:25px;text-align: center;width:50px;"></input>
						    </td>
						    <td @change="td_changeIntervals">
						    	<input class="input-noborder" v-model="table_interval" style="height:25px;text-align: center;width:50px;"></input>
						    </td>

						  </tr>
						  <tr>
						    <td style="width:100px;">个数</td>
						    <td v-for="item in tableNumbers">
						    	<input class="input-noborder" v-model="item.number" style="height:25px;text-align: center;width:50px;"></input>
						    </td>
						    <td @change="td_changeNumber">
						    	<input class="input-noborder" v-model="table_Number" style="height:25px;text-align: center;width:50px;"></input>
						    </td>
						  </tr>

						</table>
					</div>
				</div>
			</div>
			<div class="row box_footer">
				<div class="col-md-12">
					<button class="btn btn-primary btn-xs btn-bim pull-right" @click="submit" >确定</button>
				</div>
			</div>
		</div>
	</div>
	</div>

	<div class="body-full-mask" v-if="isShowMask" v-cloak>
		<div class="app-loading">
	  		<div class="box">
	  			<div class="line-spin-fade-loader">
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  				<div></div>
	  			</div>
	  			<p>{{showMaskInfo}}</p>

	  		</div>
  		</div>
	</div>

	<script src=".../public/javascripts/vue.js"></script>
	<script src=".../public/javascripts/vue-resource.min.js"></script>
	<script>
		vue = new Vue ({
			el:'body',
			data:{
				objs:[],
				type:'',
				path:'',
				options:[],
				lists:[],
				selected:'',//设置族
				selected_type:'',//设置族类型
				selected_symbol: {},  //选中的族类型对象

				selected_bz_type:'中心',//设置布置类型
				type_options:[  //布置类型选项
					{value:'中心'},
					{value:'头部'}
				],

				input_dbg:'0', //设置低标高

				input_add_name:'',//新增类型 名字
				input_add_width:'',//新增类型 宽度
				input_add_height:'',//新增类型 高度
				isDanger:false,
				status:false,
				isTableShow:false, // 点击头部的时候判断是否显示表格
				table_interval:'',//表格-相邻间隔
				table_Number:'',//表格-个数
				tableIntervals:[],//间隔数组
				tableNumbers:[],//个数数组
				isShowMask:false,//是否显示全屏遮罩
				showMaskInfo:'正在获取族类型信息'
			},

			created(){
				this.type = this.getQueryString('Type');
				console.log(this.type);
				if (this.type == "Door")
				{
					this.path = "土建\\门\\";
					document.title = "布置门";
				}

				else if (this.type == "Window")
				{
					this.path = "土建\\窗\\";
					document.title = "布置窗";
				}

				if (window.JQ)
				{
					var sendJson = {
						EventName:'JQFamily',
						Path:this.path,
						Operation:'getFamilyFileInfos',
						Parameters:{宽度:'',高度:''},
						Callback:'vue.loadRes'
						}
					this.showMaskInfo ='正在获取族类型信息';
					this.isShowMask = true;
					JQ.raiseEvent(JSON.stringify(sendJson));
				}

				that = this;

				var tableIntervalsStr;
				var tableNumbersStr;
				var dbgStr;
				if (this.type == "Door")
				{
					tableIntervalsStr = localStorage.doorTableIntervalsStr;
					tableNumbersStr = localStorage.doorTableNumbersStr;
					dbgStr = localStorage.doorDgbStr;
				}
				else if (this.type == "Window")
				{
					tableIntervalsStr = localStorage.windowTableIntervalsStr;
					tableNumbersStr = localStorage.windowTableNumbersStr;
					dbgStr = localStorage.windowDgbStr;
				}
				if (tableIntervalsStr != undefined && tableIntervalsStr.length > 0)
				{
					tableIntervalsStrArr = tableIntervalsStr.split('--');
					tableIntervalsStrArr.forEach(function(item){
						that.tableIntervals.push({interval:item});
					});
				}

				if (tableNumbersStr != undefined && tableNumbersStr.length > 0)
				{
					tableNumbersStrArr = tableNumbersStr.split('--');
					tableNumbersStrArr.forEach(function(item){
						that.tableNumbers.push({number:item});
					});
				}
				if (dbgStr !=undefined && dbgStr.length > 0)
				{
					that.input_dbg = dbgStr;
				}
				else
				{
					if (this.type == "Door")
						that.input_dbg = '0';
					else if (this.type == 'Window')
						that.input_dbg = '950';
				}
			},

			methods:{
				getQueryString(name) {
     				var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
     				var r = window.location.search.substr(1).match(reg);
     				if (r != null) {
				 		return  unescape(r[2]);
					}
					return null;
				},

				loadRes(res){
					var that = this;
					isReload = that.options.length > 0;
					that.options = [];
					res.forEach(function(e) {
						that.options.push({value:e.name,items:e.symbols});
					})

					if (!isReload && that.options.length > 0) {
						that.selected = that.options[0].value
					}
					this.isShowMask = false;

				},

				clickItems(obj) {
					this.status = true;
					console.log(obj)
					var that = this;
					that.selected_symbol = obj;
					that.input_add_name = obj.symbolName;
					that.input_add_width = obj.parameters.宽度;
					that.input_add_height = obj.parameters.高度;
				},

				//布置类型selected 监听中心与头部方法
				chooseSelectOption() {
					console.log(this.selected_bz_type)
					if(this.selected_bz_type == '头部') {
						this.isTableShow = true
					}
					else {
						this.isTableShow = false
					}

				},
				//监听改变 布置类型 - 头部 -表格中的相邻间隔
				td_changeIntervals() {
					if( /^[0-9]+.?[0-9]*$/.test(this.table_interval) == false ){
						alert('请输入数字')
						this.table_interval = '';
					}
					else {
						this.inputHasDataFun();
					   }

				},
				//监听改变 布置类型 - 头部 -表格中的个数
				td_changeNumber(){
					if( /^[0-9]+.?[0-9]*$/.test(this.table_Number) == false ){
						alert('请输入数字')
						this.table_Number = '';
					}
					else {
						this.inputHasDataFun();
					}

				},
				//输入相邻间隔与个数后，默认后面自动增加一列
				inputHasDataFun(){
					for(var i =0;i<=this.table_interval.length;i++) {
						for(var j =i;j<=this.table_Number.length;j++) {
							if((this.table_interval[i] && this.table_Number[j]) != undefined) {
								this.tableIntervals.push({interval:this.table_interval})
								this.table_interval = '';
								this.tableNumbers.push({number:this.table_Number})
								this.table_Number = '';
							}
							else {
								console.log('请输入完整')
							}
						}

					}
				},
				submitData(obj,status) {
					var that = this;
					console.log(obj)
					if(status == '修改') {
						if (window.JQ)
						{
							var sendJson = {
								EventName:'JQFamily',
								Path:that.path,
								Operation:'modifyFamilySymbol',
								FamilyName:that.selected,
								SymbolName:that.selected_type[0],
								SymbolNewName:that.input_add_name,
								Parameters:{宽度:that.input_add_width,高度:that.input_add_height},
								Callback:'vue.reloadData'
								}
							that.showMaskInfo ='正在更新族类型';
							that.isShowMask = true;
							JQ.raiseEvent(JSON.stringify(sendJson));

						}

						that.status = false;

					}
					else if (status == '增加'){
						if (window.JQ)
						{
							var sendJson = {
								EventName:'JQFamily',
								Path:that.path,
								Operation:'addFamilySymbol',
								FamilyName:that.selected,
								SymbolName:that.input_add_name,
								Parameters:{宽度:that.input_add_width,高度:that.input_add_height},
								Callback:'vue.reloadData'
								}
							that.showMaskInfo ='正在更新族类型';
							that.isShowMask = true;
							JQ.raiseEvent(JSON.stringify(sendJson));
						}
					}
				},

				reloadData()
				{
					var sendJson = {
						EventName:'JQFamily',
						Path:this.path,
						Operation:'getFamilyFileInfos',
						Parameters:{宽度:'',高度:''},
						Callback:'vue.loadRes'
						}
					JQ.raiseEvent(JSON.stringify(sendJson));
					this.isShowMask = false;
				},

				submit(){
					var that = this;
					var info = {};
					info.EventName="PlaceDoorWindow";

					info.Dist = "";
					info.FamilyName = that.selected;
					info.FamilyCatalog = this.type;
					info.SymbolName = that.selected_type[0];
					info.Path = that.path;
					info.PlaceType = that.selected_bz_type;
					info.HeightParameter = that.input_dbg;

					if (that.tableNumbers.length == that.tableIntervals.length)
					{
						for (var i = 0; i < that.tableNumbers.length ; i++)
						{
							if (parseInt(that.tableIntervals[i].interval) == NaN || parseInt(that.tableNumbers[i].number) == NaN)
								continue;
							if (parseInt(that.tableIntervals[i].interval) > 0 && parseInt(that.tableNumbers[i].number) > 0)
							{

								info.Dist += that.tableIntervals[i].interval + "*" + that.tableNumbers[i].number;
								if (i != that.tableNumbers.length - 1)
									info.Dist += ";"
							}
						}
					}
					console.log(info);
					if (window.JQ) {
						JQ.raiseEvent(JSON.stringify(info));
					}

					var tableIntervalsStr = "";
					var tableNumbersStr = "";

					this.tableIntervals.forEach(function(item){
						if (tableIntervalsStr.length != 0)
							tableIntervalsStr += '--';
						tableIntervalsStr += item.interval;
					});


					this.tableNumbers.forEach(function(item){
						if (tableNumbersStr.length != 0)
							tableNumbersStr += '--';
						tableNumbersStr += item.number;
					});

					if (this.type == "Door")
					{
						localStorage.doorTableIntervalsStr = tableIntervalsStr;
						localStorage.doorTableNumbersStr = tableNumbersStr;
						localStorage.doorDgbStr =  this.input_dbg;
					}
					else if (this.type == "Window")
					{
						localStorage.windowTableIntervalsStr = tableIntervalsStr;
						localStorage.windowTableNumbersStr = tableNumbersStr;
						localStorage.windowDgbStr = this.input_dbg;
					}

				}
			},
			computed:{   //vue 的计算属性
				items() {
					var items = [] ,selectedValue = this.$data.selected; //将选中 族 赋值
					this.$data.options.forEach(function(e){  //族 选择框 中的 数值 遍历
						if(e.value == selectedValue) {  //如果 选中选择框中的某值 == 前选中的 族的 值
							items = e.items; //将选中的 items 赋值给新的items
						}
					});
					return items;	//返回 items
				}
			},
			watch:{
				selected:
				{
					handler:function(val,oldVal) {
						if (this.items.length > 0)
						{
							this.selected_type = [this.items[0].symbolName];
							this.clickItems(this.items[0]);
						}
						else
							this.selected_type = [];
					}
				},
				options:
				{
					handler:function(val,oldVal) {
						if (this.selected.length > 0 && this.items.length > 0)
						{
							this.selected_type = [this.items[0].symbolName];
							this.clickItems(this.items[0]);
						}
						else
							this.selected_type = [];
					}
				}
			}
		})

	</script>
</body>
</html>